- name: set variable
  set_fact:
    consul_token: "{{ lookup('env', 'consul_master_token') }}"
    container_image: "trinodb/trino:354"
  tags:
    - example-upload
    - test

- name: Trino healthchecks pass
  uri:
    url: http://localhost:8500/v1/health/checks/trino?filter={{ '(Status=="passing")' | urlencode }}
    method: GET
    return_content: yes
    status_code: 200
    body_format: json
  when: not lookup('env', 'consul_acl') | bool
  register: result_trino
  retries: 15
  delay: 15
  until: result_trino.json | length == 3
  tags: test

- name: Trino healthchecks pass with token
  uri:
    url: http://localhost:8500/v1/health/checks/trino?filter={{ '(Status=="passing")' | urlencode }}
    method: GET
    headers:
      X-Consul-Token: "{{ consul_token }}"
    return_content: yes
    status_code: 200
    body_format: json
  when: lookup('env', 'consul_acl') | bool and lookup('env', 'consul_acl_default_policy') == 'deny'
  register: result_trino
  retries: 15
  delay: 15
  until: result_trino.json | length == 3
  tags: test

- name: Start local proxy on port 8888 to trino service
  shell: nohup consul connect proxy -service trino-local -upstream trino:8888 -log-level debug </dev/null >/tmp/trino-proxy.log 2>&1 &
  register: test_output
  when: not lookup('env', 'consul_acl') | bool or (lookup('env', 'consul_acl') | bool and lookup('env', 'consul_acl_default_policy') == 'allow')
  environment:
      CONSUL_HTTP_TOKEN: "{{ consul_token }}"
  tags:
    - example-upload
    - test

- name: Start local proxy on port 8888 to trino service with token
  shell: nohup consul connect proxy -service trino-local -upstream trino:8888 -log-level debug </dev/null >/tmp/trino-proxy.log 2>&1 &
  register: test_output
  when: lookup('env', 'consul_acl') | bool and lookup('env', 'consul_acl_default_policy') == 'deny'
  environment:
    CONSUL_HTTP_TOKEN: "{{ consul_token }}"
  tags:
    - example-upload
    - test

# To quickly verify that proxy available (without any credentials)
- name: Trino curl example. Verify that proxy to trino available
  uri:
    url: http://127.0.0.1:8888/v1/status
    status_code: 200
  register: curl_output
  until: curl_output.status == 200
  retries: 10
  delay: 5
  tags:
    - example-upload
    - test

- name: Debug curl_output
  debug:
    msg: "{{curl_output}}"
  tags:
    - example-upload
    - test

- name: Create CSV table
  shell: docker run --network host -v "/vagrant/example/resources/query/csv_create_table.sql:/csv_create_table.sql" {{ container_image }} trino --http-proxy 127.0.0.1:8888 --server 127.0.0.1:8888 --catalog hive --schema default --user trino --file /csv_create_table.sql
  register: docker_output_cmd_csv
  retries: 10
  delay: 2
  until: docker_output_cmd_csv.stderr.find("CREATE TABLE") != -1
  tags:
    - example-upload
    - test
  # TODO: This error must be tracked down: Error running command: java.io.IOException: unexpected end of stream on Connection{127.0.0.1:8888, proxy=HTTP @ 127.0.0.1:8888 hostAddress=/127.0.0.1:8888 cipherSuite=none protocol=http/1.1}

- name: Create JSON table
  shell: docker run --network host -v "/vagrant/example/resources/query/json_create_table.sql:/json_create_table.sql" {{ container_image }} trino --http-proxy 127.0.0.1:8888 --server 127.0.0.1:8888 --catalog hive --schema default --user trino --file /json_create_table.sql
  register: docker_output_cmd_json
  retries: 10
  delay: 2
  until: docker_output_cmd_json.stderr.find("CREATE TABLE") != -1
  tags:
    - example-upload
    - test

- name: Create AVRO table
  shell: docker run --network host -v "/vagrant/example/resources/query/avro_tweets_create_table.sql:/avro_tweets_create_table.sql" {{ container_image }} trino --http-proxy 127.0.0.1:8888 --server 127.0.0.1:8888 --catalog hive --schema default --user trino --file /avro_tweets_create_table.sql
  register: docker_output_cmd_avro
  retries: 10
  delay: 2
  until: docker_output_cmd_avro.stderr.find("CREATE TABLE") != -1
  tags:
    - example-upload
    - test

- name: Verify CSV table - available 150 records
  shell: docker run --network host {{ container_image }} trino --http-proxy 127.0.0.1:8888 --server 127.0.0.1:8888 --catalog hive --schema default --user trino --execute "SELECT COUNT(*) FROM iris;"
  register: query_csv_result
  retries: 10
  delay: 2
  until: query_csv_result.stdout == "\"150\""
  tags:
    - example-upload
    - test

- name: Verify JSON table - available 2 records
  shell: docker run --network host {{ container_image }} trino --http-proxy 127.0.0.1:8888 --server 127.0.0.1:8888 --catalog hive --schema default --user trino --execute "SELECT COUNT(*) FROM somejson;"
  register: query_json_result
  retries: 10
  delay: 2
  until: query_json_result.stdout == "\"2\""
  tags:
    - example-upload
    - test

- name: Verify AVRO table - available 2 records
  shell: docker run --network host {{ container_image }} trino --http-proxy 127.0.0.1:8888 --server 127.0.0.1:8888 --catalog hive --schema default --user trino --execute "SELECT COUNT(*) FROM tweets;"
  register: query_avro_result
  retries: 10
  delay: 2
  until: query_avro_result.stdout == "\"2\""
  tags:
    - example-upload
    - test

# Flatten json VIEW example
- name: Flatten JSON table with VIEW
  shell: docker run --network host -v "/vagrant/example/resources/query/flattenedjson_json.sql:/flattenedjson_json.sql" {{ container_image }} trino --http-proxy 127.0.0.1:8888 --server 127.0.0.1:8888 --catalog hive --schema default --user trino --file /flattenedjson_json.sql
  register: docker_output_cmd_json_2
  retries: 10
  delay: 2
  until: docker_output_cmd_json_2.stderr.find("CREATE VIEW") != -1
  tags:
    - example-upload
    - test

- name: Verify JSON view - available 2 records
  shell: docker run --network host {{ container_image }} trino --http-proxy 127.0.0.1:8888 --server 127.0.0.1:8888 --catalog hive --schema default --user trino --execute "SELECT COUNT(*) FROM flattenedjson;"
  register: query_json_result_2
  retries: 10
  delay: 2
  until: query_json_result_2.stdout == "\"2\""
  tags:
    - example-upload
    - test
